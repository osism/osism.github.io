"use strict";(self.webpackChunkosism=self.webpackChunkosism||[]).push([[9372],{3197:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>l});var r=s(5893),i=s(1151);const t={sidebar_label:"OpenStack",sidebar_position:50},o="OpenStack",c={id:"guides/configuration-guide/openstack/index",title:"OpenStack",description:"Network interfaces",source:"@site/docs/guides/configuration-guide/openstack/index.md",sourceDirName:"guides/configuration-guide/openstack",slug:"/guides/configuration-guide/openstack/",permalink:"/docs/guides/configuration-guide/openstack/",draft:!1,unlisted:!1,editUrl:"https://github.com/osism/osism.github.io/tree/main/docs/guides/configuration-guide/openstack/index.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_label:"OpenStack",sidebar_position:50},sidebar:"tutorialSidebar",previous:{title:"Ceph",permalink:"/docs/guides/configuration-guide/ceph"},next:{title:"Horizon",permalink:"/docs/guides/configuration-guide/openstack/horizon"}},a={},l=[{value:"Network interfaces",id:"network-interfaces",level:2},{value:"How does the configuration get into services?",id:"how-does-the-configuration-get-into-services",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"openstack",children:"OpenStack"}),"\n",(0,r.jsx)(n.h2,{id:"network-interfaces",children:"Network interfaces"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Parameter"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Default"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"network_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"eth0"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"neutron_external_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ network_interface }}"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"kolla_external_vip_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ network_interface }}"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"api_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ network_interface }}"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"migration_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ api_interface }}"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tunnel_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ network_interface }}"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"octavia_network_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ 'o-hm0' if octavia_network_type == 'tenant' else api_interface }}"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dns_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ network_interface }}"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dpdk_tunnel_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ neutron_external_interface }}"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ironic_http_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ api_interface }}"})}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ironic_tftp_interface"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{{ api_interface }}"})}),(0,r.jsx)(n.td,{})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"how-does-the-configuration-get-into-services",children:"How does the configuration get into services?"}),"\n",(0,r.jsx)(n.p,{children:"It is explained with example of OpenSearch Service how the configuration for OpenSearch\nis created and gets into the container."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The task ",(0,r.jsx)(n.a,{href:"https://github.com/openstack/kolla-ansible/blob/master/ansible/roles/opensearch/tasks/config.yml",children:"Copying over opensearch service config file"}),"\nmerges the individual sources of the files."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="Copying over opensearch service config file task"',children:'- name: Copying over opensearch service config file\n  merge_yaml:\n    sources:\n      # highlight-start\n  - "{{ role_path }}/templates/opensearch.yml.j2"\n  - "{{ node_custom_config }}/opensearch.yml"\n  - "{{ node_custom_config }}/opensearch/opensearch.yml"\n  - "{{ node_custom_config }}/opensearch/{{ inventory_hostname }}/opensearch.yml"\n      # highlight-end\n    dest: "{{ node_config_directory }}/opensearch/opensearch.yml"\n    mode: "0660"\n  become: true\n  when:\n    - inventory_hostname in groups[\'opensearch\']\n    - opensearch_services[\'opensearch\'].enabled | bool\n  notify:\n    - Restart opensearch container\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["As a basis a template ",(0,r.jsx)(n.a,{href:"https://github.com/openstack/kolla-ansible/blob/master/ansible/roles/opensearch/templates/opensearch.yml.j2",children:"opensearch.yml.j2"}),"\nis used which is part of the OpenSearch service role."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="opensearch.yml.j2 template"',children:"{% set num_nodes = groups['opensearch'] | length %}\n{% set recover_after_nodes = (num_nodes * 2 / 3) | round(0, 'floor') | int if num_nodes > 1 else 1 %}\nplugins.security.disabled: \"true\"\n\nnode.name: \"{{ 'api' | kolla_address | put_address_in_context('url') }}\"\nnetwork.host: \"{{ 'api' | kolla_address | put_address_in_context('url') }}\"\n\ncluster.name: \"{{ opensearch_cluster_name }}\"\ncluster.initial_master_nodes: [{% for host in groups['opensearch'] %}\"{{ 'api' | kolla_address(host) }}\"{% if not loop.last %},{% endif %}{% endfor %}]\nnode.master: true\nnode.data: true\ndiscovery.seed_hosts: [{% for host in groups['opensearch'] %}\"{{ 'api' | kolla_address(host) | put_address_in_context('url') }}\"{% if not loop.last %},{% endif %}{% endfor %}]\n\nhttp.port: {{ opensearch_port }}\ngateway.expected_nodes: {{ num_nodes }}\ngateway.recover_after_time: \"5m\"\ngateway.recover_after_nodes: {{ recover_after_nodes }}\npath.data: \"/var/lib/opensearch/data\"\npath.logs: \"/var/log/kolla/opensearch\"\nindices.fielddata.cache.size: 40%\naction.auto_create_index: \"true\"\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"For OpenSearch, overlay files can additionally be stored in 3 places in the configuration repository."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"environments/kolla/files/overlays/opensearch.yml"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"environments/kolla/files/overlays/opensearch/opensearch.yml"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"environments/kolla/files/overlays/opensearch/{{ inventory_hostname }}/opensearch.yml"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["When merging files, the last file found has the most weight. If there is a parameter ",(0,r.jsx)(n.code,{children:"node.master: true"}),"\nin the service role template ",(0,r.jsx)(n.code,{children:"opensearch.yml.j2"})," of the OpenSearch service and you set e.g.\n",(0,r.jsx)(n.code,{children:"node.master: false"})," in ",(0,r.jsx)(n.code,{children:"environments/kolla/files/overlays/opensearch.yml"})," then accordingly in the finished ",(0,r.jsx)(n.code,{children:"opensearch.yml"}),"\n",(0,r.jsx)(n.code,{children:"node.master: false"})," is used."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["After the merge the task ",(0,r.jsx)(n.code,{children:"Copying over opensearch service config file"})," copies the content into the\nconfiguration directory ",(0,r.jsx)(n.code,{children:"/etc/kolla/opensearch"})," of the service."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="/etc/kolla/opensearch/opensearch.yml"',children:"action.auto_create_index: 'true'\ncluster.initial_master_nodes:\n- 192.168.16.10\ncluster.name: kolla_logging\ndiscovery.seed_hosts:\n- 192.168.16.10\ngateway.expected_nodes: 1\ngateway.recover_after_nodes: 1\ngateway.recover_after_time: 5m\nhttp.port: 9200\nindices.fielddata.cache.size: 40%\nnetwork.host: 192.168.16.10\nnode.data: true\nnode.master: true\nnode.name: 192.168.16.10\npath.data: /var/lib/opensearch/data\npath.logs: /var/log/kolla/opensearch\nplugins.security.disabled: 'true'\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The configuration directory ",(0,r.jsx)(n.code,{children:"/etc/kolla/opensearch"})," is mounted in each container of the OpenSearch service\nto ",(0,r.jsx)(n.code,{children:"/var/lib/kolla/config_files"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Output of docker inspect opensearch"',children:'"Mounts": [\n    {\n        "Type": "bind",\n        // highlight-start\n        "Source": "/etc/kolla/opensearch",\n        "Destination": "/var/lib/kolla/config_files",\n        // highlight-end\n        "Mode": "rw",\n        "RW": true,\n        "Propagation": "rprivate"\n    },\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Entrypoint of a service is always ",(0,r.jsx)(n.a,{href:"https://github.com/openstack/kolla/blob/master/docker/base/start.sh",children:"kolla_start"}),".\nThis script calls a script ",(0,r.jsx)(n.a,{href:"https://github.com/openstack/kolla/blob/master/docker/base/set_configs.py",children:"set_configs.py"}),".\nThis script takes care of copying files from ",(0,r.jsx)(n.code,{children:"/var/lib/kolla/config_files"})," to the right place inside the container.\nFor this purpose, the container has a\n",(0,r.jsx)(n.a,{href:"https://github.com/openstack/kolla-ansible/blob/master/ansible/roles/opensearch/templates/opensearch.json.j2",children:"config.json"}),"\nin which the individual actions are configured."]}),"\n",(0,r.jsxs)(n.p,{children:["The file ",(0,r.jsx)(n.code,{children:"/var/lib/kolla/config_files/opensearch.yml"})," is copied to ",(0,r.jsx)(n.code,{children:"/etc/opensearch/opensearch.yml"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The permissions of ",(0,r.jsx)(n.code,{children:"/var/lib/opensearch"})," and ",(0,r.jsx)(n.code,{children:"/var/log/kolla/opensearch"})," are set accordingly."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="/etc/kolla/opensearch/config.json"',children:'{\n    "command": "/usr/share/opensearch/bin/opensearch",\n    "config_files": [\n        {\n            // highlight-start\n            "source": "/var/lib/kolla/config_files/opensearch.yml",\n            "dest": "/etc/opensearch/opensearch.yml",\n            "owner": "opensearch",\n            "perm": "0600"\n            // highlight-end\n        }\n    ],\n    "permissions": [\n        {\n            // highlight-start\n            "path": "/var/lib/opensearch",\n            "owner": "opensearch:opensearch",\n            "recurse": true\n            // highlight-end\n        },\n        {\n            // highlight-start\n            "path": "/var/log/kolla/opensearch",\n            "owner": "opensearch:opensearch",\n            "recurse": true\n            // highlight-end\n        }\n    ]\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"config.json"})," of the service is also defined the command which will be executed after finishing the preparations.\nIn the case of OpenSearch this is ",(0,r.jsx)(n.code,{children:"/usr/share/opensearch/bin/opensearch"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="/etc/kolla/opensearch/config.json"',children:'{\n    // highlight-start\n    "command": "/usr/share/opensearch/bin/opensearch",\n    // highlight-end\n    "config_files": [\n        {\n            "source": "/var/lib/kolla/config_files/opensearch.yml",\n            "dest": "/etc/opensearch/opensearch.yml",\n            "owner": "opensearch",\n            "perm": "0600"\n        }\n    ],\n    "permissions": [\n        {\n            "path": "/var/lib/opensearch",\n            "owner": "opensearch:opensearch",\n            "recurse": true\n        },\n        {\n            "path": "/var/log/kolla/opensearch",\n            "owner": "opensearch:opensearch",\n            "recurse": true\n        }\n    ]\n}\n'})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var r=s(7294);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);