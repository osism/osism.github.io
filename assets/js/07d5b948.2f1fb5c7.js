"use strict";(self.webpackChunkosism=self.webpackChunkosism||[]).push([[6299],{6339:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>m});var a=i(5893),r=i(1151);const o={sidebar_label:"Keystone"},d="Keystone",t={id:"guides/configuration-guide/openstack/keystone",title:"Keystone",description:"Domain manager role",source:"@site/docs/guides/configuration-guide/openstack/keystone.md",sourceDirName:"guides/configuration-guide/openstack",slug:"/guides/configuration-guide/openstack/keystone",permalink:"/docs/guides/configuration-guide/openstack/keystone",draft:!1,unlisted:!1,editUrl:"https://github.com/osism/osism.github.io/tree/main/docs/guides/configuration-guide/openstack/keystone.md",tags:[],version:"current",frontMatter:{sidebar_label:"Keystone"},sidebar:"tutorialSidebar",previous:{title:"Horizon",permalink:"/docs/guides/configuration-guide/openstack/horizon"},next:{title:"Nova",permalink:"/docs/guides/configuration-guide/openstack/nova"}},s={},m=[{value:"Domain manager role",id:"domain-manager-role",level:2},{value:"OIDC Federation",id:"oidc-federation",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"keystone",children:"Keystone"}),"\n",(0,a.jsx)(n.h2,{id:"domain-manager-role",children:"Domain manager role"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"SCS Standard Track"}),(0,a.jsx)(n.th,{children:"SCS Standard"}),(0,a.jsx)(n.th,{children:"SCS Documentation"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://docs.scs.community/standards/iam/",children:"IAM"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://github.com/SovereignCloudStack/standards/blob/main/Standards/scs-0302-v1-domain-manager-role.md",children:"scs-0302"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"https://docs.scs.community/standards/scs-0302-v1-domain-manager-role/",children:"Domain Manager configuration for Keystone"})})]})})]}),"\n",(0,a.jsxs)(n.p,{children:["To configure and use the domain manager role from the SCS project, the\n",(0,a.jsx)(n.code,{children:"environments/kolla/files/overlays/keystone/policy.yaml"})," file is created\nin the configuration repository. The deployment and upgrade of the Keystone\nservice itself is then done as usual."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="environments/kolla/files/overlays/keystone/policy.yaml"',children:'# classify domain managers with a special role\n"is_domain_manager": "role:domain-manager"\n\n# specify a rule that whitelists roles which domain admins are permitted\n# to assign and revoke within their domain\n"is_domain_managed_role": "\'member\':%(target.role.name)s or \'load-balancer_member\':%(target.role.name)s or \'creator\':%(target.role.name)s"\n\n# allow domain admins to retrieve their own domain\n"identity:get_domain": "(rule:is_domain_manager and token.domain.id:%(target.domain.id)s) or rule:admin_required"\n\n# list_domains is needed for GET /v3/domains?name=... requests\n# this is mandatory for things like\n# `create user --domain $DOMAIN_NAME $USER_NAME` to correctly discover\n# domains by name\n"identity:list_domains": "rule:is_domain_manager or rule:admin_required"\n\n# list_roles is needed for GET /v3/roles?name=... requests\n# this is mandatory for things like `role add ... $ROLE_NAME`` to correctly\n# discover roles by name\n"identity:list_roles": "rule:is_domain_manager or rule:admin_required"\n\n# get_role is needed for GET /v3/roles/{role_id} requests\n# this is mandatory for the OpenStack SDK to properly process role assignments\n# which are issued by role id instead of name\n"identity:get_role": "(rule:is_domain_manager and rule:is_domain_managed_role) or rule:admin_required"\n\n# allow domain admins to manage users within their domain\n"identity:list_users": "(rule:is_domain_manager and token.domain.id:%(target.domain_id)s) or rule:admin_required"\n"identity:get_user": "(rule:is_domain_manager and token.domain.id:%(target.user.domain_id)s) or rule:admin_required"\n"identity:create_user": "(rule:is_domain_manager and token.domain.id:%(target.user.domain_id)s) or rule:admin_required"\n"identity:update_user": "(rule:is_domain_manager and token.domain.id:%(target.user.domain_id)s) or rule:admin_required"\n"identity:delete_user": "(rule:is_domain_manager and token.domain.id:%(target.user.domain_id)s) or rule:admin_required"\n\n# allow domain admins to manage projects within their domain\n"identity:list_projects": "(rule:is_domain_manager and token.domain.id:%(target.domain_id)s) or rule:admin_required"\n"identity:get_project": "(rule:is_domain_manager and token.domain.id:%(target.project.domain_id)s) or rule:admin_required"\n"identity:create_project": "(rule:is_domain_manager and token.domain.id:%(target.project.domain_id)s) or rule:admin_required"\n"identity:update_project": "(rule:is_domain_manager and token.domain.id:%(target.project.domain_id)s) or rule:admin_required"\n"identity:delete_project": "(rule:is_domain_manager and token.domain.id:%(target.project.domain_id)s) or rule:admin_required"\n"identity:list_user_projects": "(rule:is_domain_manager and token.domain.id:%(target.user.domain_id)s) or user_id:%(user_id)s or rule:admin_required"\n\n# allow domain managers to manage role assignments within their domain\n# (restricted to specific roles by the \'is_domain_managed_role\' rule)\n#\n# project-level role assignment to user within domain\n"is_domain_user_project_grant": "token.domain.id:%(target.user.domain_id)s and token.domain.id:%(target.project.domain_id)s and rule:is_domain_managed_role"\n# project-level role assignment to group within domain\n"is_domain_group_project_grant": "token.domain.id:%(target.group.domain_id)s and token.domain.id:%(target.project.domain_id)s and rule:is_domain_managed_role"\n# domain-level role assignment to group\n"is_domain_level_group_grant": "token.domain.id:%(target.group.domain_id)s and token.domain.id:%(target.domain.id)s and rule:is_domain_managed_role"\n# domain-level role assignment to user\n"is_domain_level_user_grant": "token.domain.id:%(target.user.domain_id)s and token.domain.id:%(target.domain.id)s and rule:is_domain_managed_role"\n"domain_manager_grant": "rule:is_domain_manager and (rule:is_domain_user_project_grant or rule:is_domain_group_project_grant or rule:is_domain_level_group_grant or rule:is_domain_level_user_grant)"\n"identity:check_grant": "rule:domain_manager_grant or rule:admin_required"\n"identity:list_grants": "rule:domain_manager_grant or rule:admin_required"\n"identity:create_grant": "rule:domain_manager_grant or rule:admin_required"\n"identity:revoke_grant": "rule:domain_manager_grant or rule:admin_required"\n"identity:list_role_assignments": "(rule:is_domain_manager and token.domain.id:%(target.domain_id)s) or rule:admin_required"\n\n# allow domain managers to manage groups within their domain\n"identity:list_groups": "(rule:is_domain_manager and token.domain.id:%(target.group.domain_id)s) or rule:admin_required"\n"identity:get_group": "(rule:is_domain_manager and token.domain.id:%(target.group.domain_id)s) or rule:admin_required"\n"identity:create_group": "(rule:is_domain_manager and token.domain.id:%(target.group.domain_id)s) or rule:admin_required"\n"identity:update_group": "(rule:is_domain_manager and token.domain.id:%(target.group.domain_id)s) or rule:admin_required"\n"identity:delete_group": "(rule:is_domain_manager and token.domain.id:%(target.group.domain_id)s) or rule:admin_required"\n"identity:list_groups_for_user": "(rule:is_domain_manager and token.domain.id:%(target.user.domain_id)s) or rule:admin_required"\n"identity:list_users_in_group": "(rule:is_domain_manager and token.domain.id:%(target.group.domain_id)s) or rule:admin_required"\n"identity:remove_user_from_group": "(rule:is_domain_manager and token.domain.id:%(target.group.domain_id)s and token.domain.id:%(target.user.domain_id)s) or rule:admin_required"\n"identity:check_user_in_group": "(rule:is_domain_manager and token.domain.id:%(target.group.domain_id)s and token.domain.id:%(target.user.domain_id)s) or rule:admin_required"\n"identity:add_user_to_group": "(rule:is_domain_manager and token.domain.id:%(target.group.domain_id)s and token.domain.id:%(target.user.domain_id)s) or rule:admin_required"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The role ",(0,a.jsx)(n.code,{children:"domain-manager"})," is created using the OpenStack CLI. Alternatively, the role can\nbe added using Ansible or other tools."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'$ openstack --os-cloud admin \\\n    role create \\\n    --or-show \\\n    --description "Domain Manager Role" \\\n    domain-manager\n+-------------+----------------------------------+\n| Field       | Value                            |\n+-------------+----------------------------------+\n| description | Domain Manager Role              |\n| domain_id   | None                             |\n| id          | 9b7140bfe628468ab9b86b365f9ac4c2 |\n| name        | domain-manager                   |\n| options     | {}                               |\n+-------------+----------------------------------+\n'})}),"\n",(0,a.jsx)(n.p,{children:"A user can then be made a domain manager for a particular domain by assigning this role."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"$ openstack --os-cloud admin \\\n    role add \\\n    --user test \\\n    --domain test \\\n    domain-manager\n"})}),"\n",(0,a.jsx)(n.h2,{id:"oidc-federation",children:"OIDC Federation"})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>t,a:()=>d});var a=i(7294);const r={},o=a.createContext(r);function d(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);